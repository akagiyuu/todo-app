// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories(name)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTodo = `-- name: CreateTodo :exec
INSERT INTO todos(title, description, priority_id, category_id)
VALUES (?, ?, ?, ?)
`

type CreateTodoParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	PriorityID  int64  `json:"priority_id"`
	CategoryID  int64  `json:"category_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.ExecContext(ctx, createTodo,
		arg.Title,
		arg.Description,
		arg.PriorityID,
		arg.CategoryID,
	)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const filterTodo = `-- name: FilterTodo :many
SELECT todos.id as id, title, description, priorities.name as priority, categories.name as category
FROM todos
INNER JOIN priorities ON priorities.id = priority_id
INNER JOIN categories ON categories.id = category_id
WHERE
    (priorities.name = ?1 OR ?1 = '') AND
    (categories.name = ?2 OR ?2 = '')
`

type FilterTodoParams struct {
	Priority string `json:"priority"`
	Category string `json:"category"`
}

type FilterTodoRow struct {
	ID          int64  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Priority    string `json:"priority"`
	Category    string `json:"category"`
}

func (q *Queries) FilterTodo(ctx context.Context, arg FilterTodoParams) ([]FilterTodoRow, error) {
	rows, err := q.db.QueryContext(ctx, filterTodo, arg.Priority, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterTodoRow
	for rows.Next() {
		var i FilterTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategories = `-- name: GetCategories :many
SELECT name FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id FROM categories WHERE name = ?
`

func (q *Queries) GetCategory(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCategory, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPriorities = `-- name: GetPriorities :many
SELECT name FROM priorities
`

func (q *Queries) GetPriorities(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPriorities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPriority = `-- name: GetPriority :one
SELECT id FROM priorities WHERE name = ?
`

func (q *Queries) GetPriority(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPriority, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getTodo = `-- name: GetTodo :one
SELECT todos.id as id, title, description, priorities.name as priority, categories.name as category
FROM todos
INNER JOIN priorities ON priorities.id = priority_id
INNER JOIN categories ON categories.id = category_id
WHERE todos.id = ?1
`

type GetTodoRow struct {
	ID          int64  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Priority    string `json:"priority"`
	Category    string `json:"category"`
}

func (q *Queries) GetTodo(ctx context.Context, id int64) (GetTodoRow, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i GetTodoRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Category,
	)
	return i, err
}
